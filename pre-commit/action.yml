---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: pre-commit
description: 'Runs pre-commit on the repository and pushes the fixes back to the repository'
author: 'Ismo Vuorinen'

branding:
  icon: check-square
  color: green

inputs:
  pre-commit-config:
    description: 'pre-commit configuration file'
    required: false
    default: '.pre-commit-config.yaml'
  base-branch:
    description: 'Base branch to compare against'
    required: false
  token:
    description: 'GitHub token for authentication'
    required: false
    default: ${{ github.token }}
  commit_user:
    description: 'Commit user'
    required: false
    default: 'GitHub Actions'
  commit_email:
    description: 'Commit email'
    required: false
    default: 'github-actions@github.com'

outputs:
  hooks_passed:
    description: 'Whether all pre-commit hooks passed (true/false)'
    value: ${{ steps.pre-commit.outcome == 'success' }}
  files_changed:
    description: 'Whether any files were changed by pre-commit hooks'
    value: ${{ steps.push-fixes.outputs.changes_detected }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      id: validate
      shell: bash
      run: |
        set -euo pipefail

        # Validate pre-commit config file path security
        if [[ "${{ inputs.pre-commit-config }}" == *".."* ]] || [[ "${{ inputs.pre-commit-config }}" == "/"* ]]; then
          echo "::error::Invalid pre-commit-config path: '${{ inputs.pre-commit-config }}'. Path traversal not allowed"
          exit 1
        fi

        # Validate pre-commit config file extension
        if [[ "${{ inputs.pre-commit-config }}" != *.yaml ]] && [[ "${{ inputs.pre-commit-config }}" != *.yml ]]; then
          echo "::error::Invalid pre-commit-config: '${{ inputs.pre-commit-config }}'. Must be a .yaml or .yml file"
          exit 1
        fi

        # Validate base branch format if provided
        if [[ -n "${{ inputs.base-branch }}" ]]; then
          # Prevent command injection and validate basic branch name format
          if [[ "${{ inputs.base-branch }}" == *";"* ]] || [[ "${{ inputs.base-branch }}" == *"&&"* ]] || [[ "${{ inputs.base-branch }}" == *"|"* ]]; then
            echo "::error::Invalid base-branch: '${{ inputs.base-branch }}'. Command injection patterns not allowed"
            exit 1
          fi

          # Validate branch name format (basic git branch naming rules)
          if [[ "${{ inputs.base-branch }}" == *".."* ]] || [[ "${{ inputs.base-branch }}" == *"~"* ]] || [[ "${{ inputs.base-branch }}" == *"^"* ]]; then
            echo "::error::Invalid base-branch: '${{ inputs.base-branch }}'. Invalid git branch name characters"
            exit 1
          fi

          # Check for valid branch name characters
          if ! [[ "${{ inputs.base-branch }}" =~ ^[a-zA-Z0-9/_.-]+$ ]]; then
            echo "::error::Invalid base-branch: '${{ inputs.base-branch }}'. Branch name contains invalid characters"
            exit 1
          fi

          # Prevent branch names starting or ending with special characters
          if [[ "${{ inputs.base-branch }}" == "."* ]] || [[ "${{ inputs.base-branch }}" == *"." ]] || [[ "${{ inputs.base-branch }}" == "-"* ]] || [[ "${{ inputs.base-branch }}" == "/"* ]] || [[ "${{ inputs.base-branch }}" == *"/" ]]; then
            echo "::error::Invalid base-branch: '${{ inputs.base-branch }}'. Branch name cannot start/end with '.', '-', or '/'"
            exit 1
          fi
        fi

        # Validate email format (basic check)
        if [[ "${{ inputs.commit_email }}" != *"@"* ]] || [[ "${{ inputs.commit_email }}" != *"."* ]]; then
          echo "::error::Invalid commit_email format: '${{ inputs.commit_email }}'. Expected valid email address"
          exit 1
        fi

        # Validate commit user format (prevent command injection)
        if [[ "${{ inputs.commit_user }}" == *";"* ]] || [[ "${{ inputs.commit_user }}" == *"&&"* ]] || [[ "${{ inputs.commit_user }}" == *"|"* ]]; then
          echo "::error::Invalid commit_user: '${{ inputs.commit_user }}'. Command injection patterns not allowed"
          exit 1
        fi

        # Validate token format if provided (basic GitHub token pattern)
        if [[ -n "${{ inputs.token }}" ]]; then
          if ! [[ "${{ inputs.token }}" =~ ^gh[pousr]_[a-zA-Z0-9]{36}$ ]]; then
            echo "::warning::GitHub token format may be invalid. Expected format: gh*_36characters"
          fi
        fi
    - name: Set Git Config
      uses: ivuorinen/actions/set-git-config@main
      with:
        token: ${{ inputs.token }}
        username: ${{ inputs.commit_user }}
        email: ${{ inputs.commit_email }}

    - name: Set option
      id: set-option
      run: |
        set -euo pipefail

        if [ -z "${{ inputs.base-branch }}" ]; then
          echo "option=--all-files" >> $GITHUB_OUTPUT
          exit 0
        fi
        echo "option=--from-ref ${{ inputs.base-branch }} --to-ref HEAD" >> $GITHUB_OUTPUT
      shell: bash

    - name: Run pre-commit
      id: pre-commit
      uses: pre-commit/action@2c7b3805fd2a0fd8c1884dcaebf91fc102a13ecd # v3.0.1
      with:
        extra_args: --config ${{ inputs.pre-commit-config }} ${{ steps.set-option.outputs.option }}

    - name: Push pre-commit fixes
      id: push-fixes
      if: always() # Push changes even when pre-commit fails
      uses: stefanzweifel/git-auto-commit-action@778341af668090896ca464160c2def5d1d1a3eb0 # v6.0.1
      with:
        commit_message: 'style(pre-commit): autofix'
        add_options: -u
