---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Setup Test Environment
description: Common setup for test jobs (Python, Node, system tools, ShellSpec)

inputs:
  install-act:
    description: Whether to install act for integration tests
    required: false
    default: 'false'
  install-kcov:
    description: Whether to build and install kcov from source for coverage (v42)
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Install uv
      uses: astral-sh/setup-uv@3259c6206f993105e3a61b142c2d97bf4b9ef83d # v7.1.0
      with:
        enable-cache: true

    - name: Set up Python
      uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
      with:
        python-version-file: pyproject.toml

    - name: Install Python dependencies
      shell: bash
      run: uv sync --frozen

    - name: Setup Node.js
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: '20'
        cache: npm

    - name: Install Node dependencies
      shell: bash
      run: npm ci

    - name: Install system tools
      shell: bash
      run: |
        sudo apt-get update
        sudo apt-get install -y --no-install-recommends jq shellcheck

    - name: Install kcov from source
      if: inputs.install-kcov == 'true'
      shell: bash
      run: |
        echo "Installing kcov build dependencies..."
        sudo apt-get install -y --no-install-recommends \
          cmake \
          libcurl4-openssl-dev \
          libdw-dev \
          libelf-dev \
          libiberty-dev \
          pkg-config \
          zlib1g-dev

        echo "Building kcov from source..."
        cd /tmp
        git clone --depth 1 --branch v42 https://github.com/SimonKagstrom/kcov.git
        cd kcov
        mkdir build
        cd build
        cmake ..
        make
        sudo make install
        cd /
        rm -rf /tmp/kcov

        echo "Verifying kcov installation..."
        kcov --version

    - name: Install ShellSpec
      shell: bash
      run: |
        # Pin to specific version to avoid supply-chain risks
        SHELLSPEC_VERSION="0.28.1"
        SHELLSPEC_URL="https://github.com/shellspec/shellspec/archive/refs/tags/${SHELLSPEC_VERSION}.tar.gz"

        echo "Downloading ShellSpec ${SHELLSPEC_VERSION}..."
        curl -fsSL "${SHELLSPEC_URL}" -o "/tmp/shellspec.tar.gz"

        echo "Installing ShellSpec..."
        mkdir -p ~/.local/lib
        tar -xzf /tmp/shellspec.tar.gz -C ~/.local/lib
        mv ~/.local/lib/shellspec-${SHELLSPEC_VERSION} ~/.local/lib/shellspec
        rm /tmp/shellspec.tar.gz

        sudo ln -s ~/.local/lib/shellspec/shellspec /usr/local/bin/shellspec

    - name: Install act
      if: inputs.install-act == 'true'
      shell: bash
      run: |
        # Pin to specific version to avoid supply-chain risks
        ACT_VERSION="0.2.82"
        ACT_ARCH="Linux_x86_64"
        ACT_URL="https://github.com/nektos/act/releases/download/v${ACT_VERSION}/act_${ACT_ARCH}.tar.gz"
        ACT_CHECKSUM_URL="https://github.com/nektos/act/releases/download/v${ACT_VERSION}/checksums.txt"

        echo "Downloading act v${ACT_VERSION}..."
        curl -fsSL "${ACT_URL}" -o "/tmp/act.tar.gz"

        echo "Downloading checksums..."
        curl -fsSL "${ACT_CHECKSUM_URL}" -o "/tmp/act-checksums.txt"

        echo "Verifying checksum..."
        cd /tmp
        grep "act_${ACT_ARCH}.tar.gz" act-checksums.txt | sha256sum -c -

        echo "Installing act..."
        tar -xzf /tmp/act.tar.gz -C /tmp
        sudo install -m 755 /tmp/act /usr/local/bin/act
        rm /tmp/act.tar.gz /tmp/act /tmp/act-checksums.txt

        echo "Verifying act installation..."
        act --version

    - name: Setup Docker and act configuration
      if: inputs.install-act == 'true'
      shell: bash
      run: |
        # Ensure Docker is running
        docker ps > /dev/null 2>&1 || (echo "Docker is not running" && exit 1)

        # Pre-pull the act Docker image to avoid interactive prompts
        docker pull catthehacker/ubuntu:act-latest

    - name: Verify tools
      shell: bash
      run: |
        shellspec --version
        jq --version
        uv --version
        if [[ "${{ inputs.install-act }}" == "true" ]]; then
          act --version
          docker --version
        fi
