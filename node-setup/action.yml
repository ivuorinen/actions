---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Node Setup
description: 'Sets up Node.js env with advanced version management, caching, and tooling.'
author: 'Ismo Vuorinen'

branding:
  icon: server
  color: green

inputs:
  default-version:
    description: 'Default Node.js version to use if no configuration file is found.'
    required: false
    default: '22'
  package-manager:
    description: 'Node.js package manager to use (npm, yarn, pnpm)'
    required: false
    default: 'npm'
  registry-url:
    description: 'Custom NPM registry URL'
    required: false
    default: 'https://registry.npmjs.org'
  token:
    description: 'Auth token for private registry'
    required: false
  cache:
    description: 'Enable dependency caching'
    required: false
    default: 'true'
  install:
    description: 'Automatically install dependencies'
    required: false
    default: 'true'
  node-mirror:
    description: 'Custom Node.js binary mirror'
    required: false
  force-version:
    description: 'Force specific Node.js version regardless of config files'
    required: false

outputs:
  node-version:
    description: 'Installed Node.js version'
    value: ${{ steps.setup.outputs.node-version }}
  package-manager:
    description: 'Selected package manager'
    value: ${{ steps.version.outputs.package-manager || inputs.package-manager }}
  cache-hit:
    description: 'Indicates if there was a cache hit'
    value: ${{ steps.deps-cache.outputs.cache-hit }}
  node-path:
    description: 'Path to Node.js installation'
    value: ${{ steps.setup.outputs.node-path }}

runs:
  using: composite
  steps:
    - name: Parse Node.js Version
      id: version
      uses: ivuorinen/actions/version-file-parser@main
      with:
        language: 'node'
        tool-versions-key: 'nodejs'
        dockerfile-image: 'node'
        version-file: '.nvmrc'
        validation-regex: '^[0-9]+(\.[0-9]+)*$'
        default-version: ${{ inputs.force-version || inputs.default-version }}

    - name: Setup Node.js
      id: setup
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: ${{ steps.version.outputs.detected-version }}
        registry-url: ${{ inputs.registry-url }}
        cache: ${{ steps.version.outputs.package-manager || inputs.package-manager }}

    - name: Set Auth Token
      if: inputs.token != ''
      shell: bash
      run: |
        echo "NODE_AUTH_TOKEN=${{ inputs.token }}" >> $GITHUB_ENV

    - name: Cache Dependencies
      if: inputs.cache == 'true'
      id: deps-cache
      uses: actions/cache@0057852bfaa89a56745cba8c7296529d2fc39830 # v4.3.0
      with:
        path: |
          ~/.npm
          ~/.yarn/cache
          ~/.pnpm-store
          node_modules
        key: ${{ runner.os }}-node-${{ steps.version.outputs.detected-version }}-${{ steps.version.outputs.package-manager || inputs.package-manager }}-${{ hashFiles('**/package-lock.json', '**/yarn.lock', '**/pnpm-lock.yaml') }}
        restore-keys: |
          ${{ runner.os }}-node-${{ steps.version.outputs.detected-version }}-${{ steps.version.outputs.package-manager || inputs.package-manager }}-

    - name: Install Dependencies
      if: inputs.install == 'true' && steps.deps-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail

        package_manager="${{ steps.version.outputs.package-manager || inputs.package-manager }}"
        echo "Installing dependencies using $package_manager..."

        case "$package_manager" in
          "pnpm")
            if ! command -v pnpm >/dev/null 2>&1; then
              npm install -g pnpm
            fi
            pnpm install --frozen-lockfile
            ;;
          "yarn")
            yarn install --frozen-lockfile
            ;;
          "npm"|*)
            npm ci
            ;;
        esac

        echo "âœ… Dependencies installed successfully"

    - name: Set Final Outputs
      shell: bash
      run: |
        {
          echo "node-version=${{ steps.version.outputs.detected-version }}"
          echo "package-manager=${{ steps.version.outputs.package-manager || inputs.package-manager }}"
          echo "node-path=$(which node)"
        } >> $GITHUB_OUTPUT
