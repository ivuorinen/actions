---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Node Setup
description: 'Sets up Node.js env with advanced version management, caching, and tooling.'
author: 'Ismo Vuorinen'

branding:
  icon: server
  color: green

inputs:
  default-version:
    description: 'Default Node.js version to use if no configuration file is found.'
    required: false
    default: '22'
  package-manager:
    description: 'Node.js package manager to use (npm, yarn, pnpm)'
    required: false
    default: 'npm'
  registry-url:
    description: 'Custom NPM registry URL'
    required: false
    default: 'https://registry.npmjs.org'
  token:
    description: 'Auth token for private registry'
    required: false
  cache:
    description: 'Enable dependency caching'
    required: false
    default: 'true'
  install:
    description: 'Automatically install dependencies'
    required: false
    default: 'true'
  node-mirror:
    description: 'Custom Node.js binary mirror'
    required: false
  force-version:
    description: 'Force specific Node.js version regardless of config files'
    required: false
  max-retries:
    description: 'Maximum number of retry attempts for package manager operations'
    required: false
    default: '3'

outputs:
  node-version:
    description: 'Installed Node.js version'
    value: ${{ steps.setup.outputs.node-version }}
  package-manager:
    description: 'Selected package manager'
    value: ${{ steps.version.outputs.package-manager || inputs.package-manager }}
  cache-hit:
    description: 'Indicates if there was a cache hit'
    value: ${{ steps.deps-cache.outputs.cache-hit }}
  node-path:
    description: 'Path to Node.js installation'
    value: ${{ steps.setup.outputs.node-path }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      id: validate
      shell: bash
      run: |
        set -euo pipefail

        # Validate default-version format
        if [[ -n "${{ inputs.default-version }}" ]]; then
          if ! [[ "${{ inputs.default-version }}" =~ ^[0-9]+(\.[0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "::error::Invalid default-version format: '${{ inputs.default-version }}'. Expected format: X or X.Y or X.Y.Z (e.g., 22, 20.9, 18.17.1)"
            exit 1
          fi

          # Check for reasonable version range (prevent malicious inputs)
          major_version=$(echo "${{ inputs.default-version }}" | cut -d'.' -f1)
          if [ "$major_version" -lt 14 ] || [ "$major_version" -gt 30 ]; then
            echo "::error::Invalid default-version: '${{ inputs.default-version }}'. Node.js major version should be between 14 and 30"
            exit 1
          fi
        fi

        # Validate force-version format if provided
        if [[ -n "${{ inputs.force-version }}" ]]; then
          if ! [[ "${{ inputs.force-version }}" =~ ^[0-9]+(\.[0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "::error::Invalid force-version format: '${{ inputs.force-version }}'. Expected format: X or X.Y or X.Y.Z (e.g., 22, 20.9, 18.17.1)"
            exit 1
          fi

          # Check for reasonable version range
          major_version=$(echo "${{ inputs.force-version }}" | cut -d'.' -f1)
          if [ "$major_version" -lt 14 ] || [ "$major_version" -gt 30 ]; then
            echo "::error::Invalid force-version: '${{ inputs.force-version }}'. Node.js major version should be between 14 and 30"
            exit 1
          fi
        fi

        # Validate package-manager
        case "${{ inputs.package-manager }}" in
          "npm"|"yarn"|"pnpm")
            # Valid package managers
            ;;
          *)
            echo "::error::Invalid package-manager: '${{ inputs.package-manager }}'. Must be one of: npm, yarn, pnpm"
            exit 1
            ;;
        esac

        # Validate registry-url format (basic URL validation)
        if [[ "${{ inputs.registry-url }}" != "https://"* ]] && [[ "${{ inputs.registry-url }}" != "http://"* ]]; then
          echo "::error::Invalid registry-url: '${{ inputs.registry-url }}'. Must be a valid HTTP/HTTPS URL"
          exit 1
        fi

        # Validate node-mirror format if provided
        if [[ -n "${{ inputs.node-mirror }}" ]]; then
          if [[ "${{ inputs.node-mirror }}" != "https://"* ]] && [[ "${{ inputs.node-mirror }}" != "http://"* ]]; then
            echo "::error::Invalid node-mirror: '${{ inputs.node-mirror }}'. Must be a valid HTTP/HTTPS URL"
            exit 1
          fi
        fi

        # Validate max retries (positive integer with reasonable upper limit)
        if ! [[ "${{ inputs.max-retries }}" =~ ^[0-9]+$ ]] || [ "${{ inputs.max-retries }}" -le 0 ] || [ "${{ inputs.max-retries }}" -gt 10 ]; then
          echo "::error::Invalid max-retries: '${{ inputs.max-retries }}'. Must be a positive integer between 1 and 10"
          exit 1
        fi

        # Validate boolean inputs
        if [[ "${{ inputs.cache }}" != "true" ]] && [[ "${{ inputs.cache }}" != "false" ]]; then
          echo "::error::Invalid cache value: '${{ inputs.cache }}'. Must be 'true' or 'false'"
          exit 1
        fi

        if [[ "${{ inputs.install }}" != "true" ]] && [[ "${{ inputs.install }}" != "false" ]]; then
          echo "::error::Invalid install value: '${{ inputs.install }}'. Must be 'true' or 'false'"
          exit 1
        fi

        # Validate auth token format if provided (basic check for NPM tokens)
        if [[ -n "${{ inputs.token }}" ]]; then
          if [[ "${{ inputs.token }}" == *";"* ]] || [[ "${{ inputs.token }}" == *"&&"* ]] || [[ "${{ inputs.token }}" == *"|"* ]]; then
            echo "::error::Invalid token format: command injection patterns not allowed"
            exit 1
          fi
        fi

        echo "Input validation completed successfully"

    - name: Parse Node.js Version
      id: version
      uses: ivuorinen/actions/version-file-parser@main
      with:
        language: 'node'
        tool-versions-key: 'nodejs'
        dockerfile-image: 'node'
        version-file: '.nvmrc'
        validation-regex: '^[0-9]+(\.[0-9]+)*$'
        default-version: ${{ inputs.force-version || inputs.default-version }}

    - name: Setup Node.js
      id: setup
      uses: actions/setup-node@a0853c24544627f65ddf259abe73b1d18a591444 # v5.0.0
      with:
        node-version: ${{ steps.version.outputs.detected-version }}
        registry-url: ${{ inputs.registry-url }}
        cache: ${{ steps.version.outputs.package-manager || inputs.package-manager }}

    - name: Set Auth Token
      if: inputs.token != ''
      shell: bash
      run: |
        echo "NODE_AUTH_TOKEN=${{ inputs.token }}" >> $GITHUB_ENV

    - name: Cache Dependencies
      if: inputs.cache == 'true'
      id: deps-cache
      uses: ivuorinen/actions/common-cache@main
      with:
        type: 'npm'
        paths: '~/.npm,~/.yarn/cache,~/.pnpm-store,node_modules'
        key-prefix: 'node-${{ steps.version.outputs.detected-version }}-${{ steps.version.outputs.package-manager || inputs.package-manager }}'
        key-files: 'package-lock.json,yarn.lock,pnpm-lock.yaml'
        restore-keys: '${{ runner.os }}-node-${{ steps.version.outputs.detected-version }}-${{ steps.version.outputs.package-manager || inputs.package-manager }}-'

    - name: Install PNPM Globally
      if: inputs.install == 'true' && steps.deps-cache.outputs.cache-hit != 'true' && (steps.version.outputs.package-manager || inputs.package-manager) == 'pnpm'
      uses: ivuorinen/actions/common-retry@main
      with:
        command: 'npm install -g pnpm'
        max-retries: ${{ inputs.max-retries }}
        description: 'Installing PNPM globally'

    - name: Install Dependencies
      if: inputs.install == 'true' && steps.deps-cache.outputs.cache-hit != 'true'
      uses: ivuorinen/actions/common-retry@main
      with:
        command: |
          package_manager="${{ steps.version.outputs.package-manager || inputs.package-manager }}"
          echo "Installing dependencies using $package_manager..."
          case "$package_manager" in
            "pnpm")
              pnpm install --frozen-lockfile
              ;;
            "yarn")
              yarn install --frozen-lockfile
              ;;
            "npm"|*)
              npm ci
              ;;
          esac
          echo "âœ… Dependencies installed successfully"
        max-retries: ${{ inputs.max-retries }}
        description: 'Installing Node.js dependencies'

    - name: Set Final Outputs
      shell: bash
      run: |
        {
          echo "node-version=${{ steps.version.outputs.detected-version }}"
          echo "package-manager=${{ steps.version.outputs.package-manager || inputs.package-manager }}"
          echo "node-path=$(which node)"
        } >> $GITHUB_OUTPUT
