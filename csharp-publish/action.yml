---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: C# Publish
description: 'Publishes a C# project to GitHub Packages.'
author: 'Ismo Vuorinen'

branding:
  icon: package
  color: blue

inputs:
  dotnet-version:
    description: 'Version of .NET SDK to use.'
    required: false
  namespace:
    description: 'GitHub namespace for the package.'
    required: true
    default: 'ivuorinen'
  token:
    description: 'GitHub token with package write permissions'
    required: false
    default: ${{ github.token }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      id: validate
      shell: bash
      run: |
        set -euo pipefail

        # Validate .NET version format if provided
        if [[ -n "${{ inputs.dotnet-version }}" ]]; then
          if ! [[ "${{ inputs.dotnet-version }}" =~ ^[0-9]+(\.[0-9]+(\.[0-9]+)?)?$ ]]; then
            echo "::error::Invalid dotnet-version format: '${{ inputs.dotnet-version }}'. Expected format: X.Y or X.Y.Z (e.g., 7.0, 8.0.100)"
            exit 1
          fi
        fi

        # Validate namespace format (GitHub username/org name)
        if ! [[ "${{ inputs.namespace }}" =~ ^[a-zA-Z0-9]([a-zA-Z0-9]|-(?=[a-zA-Z0-9])){0,38}$ ]]; then
          echo "::error::Invalid namespace format: '${{ inputs.namespace }}'. Must be a valid GitHub username/organization name (1-39 characters, alphanumeric and hyphens, no leading/trailing hyphens)"
          exit 1
        fi

        # Validate GitHub token format (basic validation)
        if [[ -n "${{ inputs.token }}" ]] && [[ "${{ inputs.token }}" != "\${{ github.token }}" ]]; then
          if ! [[ "${{ inputs.token }}" =~ ^(gh[pousr]_[a-zA-Z0-9]{36}|gho_[a-zA-Z0-9]{36})$ ]]; then
            echo "::warning::GitHub token format may be invalid. Expected format: gh*_36characters or gho_36characters"
          fi
        fi

    - name: Detect .NET SDK Version
      uses: ivuorinen/actions/dotnet-version-detect@main
      with:
        default-version: '7.0'

    - name: Setup .NET SDK
      uses: actions/setup-dotnet@d4c94342e560b34958eacfc5d055d21461ed1c5d # v5.0.0
      with:
        dotnet-version: '${{ steps.detect-dotnet-version.outputs.dotnet-version }}'

    - name: Restore Dependencies
      shell: bash
      run: |
        set -euo pipefail

        dotnet restore

    - name: Build Solution
      shell: bash
      run: |
        set -euo pipefail

        dotnet build --configuration Release --no-restore

    - name: Pack Solution
      shell: bash
      run: |
        set -euo pipefail

        dotnet pack --configuration Release --output ./artifacts

    - name: Publish Package
      shell: bash
      run: |
        set -euo pipefail

        # First attempt
        if ! dotnet nuget push ./artifacts/*.nupkg \
          --api-key ${{ inputs.token }} \
          --source "https://nuget.pkg.github.com/${{ inputs.namespace }}/index.json" \
          --skip-duplicate \
          --no-symbols; then

          echo "::warning::First publish attempt failed, retrying after 5 seconds..."
          sleep 5

          dotnet nuget push ./artifacts/*.nupkg \
            --api-key ${{ inputs.token }} \
            --source "https://nuget.pkg.github.com/${{ inputs.namespace }}/index.json" \
            --skip-duplicate \
            --no-symbols
        fi
