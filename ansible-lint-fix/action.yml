---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Ansible Lint and Fix
description: 'Lints and fixes Ansible playbooks, commits changes, and uploads SARIF report.'
author: 'Ismo Vuorinen'

branding:
  icon: 'play'
  color: 'green'

inputs:
  token:
    description: 'GitHub token for authentication'
    required: false
    default: ${{ github.token }}
  username:
    description: 'GitHub username for commits'
    required: false
    default: 'github-actions'
  email:
    description: 'GitHub email for commits'
    required: false
    default: 'github-actions@github.com'

runs:
  using: composite
  steps:
    - name: Validate Inputs
      id: validate
      shell: bash
      run: |
        set -euo pipefail

        # Validate GitHub token format (basic validation)
        if [[ -n "${{ inputs.token }}" ]] && [[ "${{ inputs.token }}" != "\${{ github.token }}" ]]; then
          if ! [[ "${{ inputs.token }}" =~ ^(gh[pousr]_[a-zA-Z0-9]{36}|gho_[a-zA-Z0-9]{36})$ ]]; then
            echo "::warning::GitHub token format may be invalid. Expected format: gh*_36characters or gho_36characters"
          fi
        fi

        # Validate email format (basic check)
        if [[ "${{ inputs.email }}" != *"@"* ]] || [[ "${{ inputs.email }}" != *"."* ]]; then
          echo "::error::Invalid email format: '${{ inputs.email }}'. Expected valid email address"
          exit 1
        fi

        # Validate username format (prevent command injection)
        if [[ "${{ inputs.username }}" == *";"* ]] || [[ "${{ inputs.username }}" == *"&&"* ]] || [[ "${{ inputs.username }}" == *"|"* ]]; then
          echo "::error::Invalid username: '${{ inputs.username }}'. Command injection patterns not allowed"
          exit 1
        fi

        # Validate username length
        if [ ${#{{ inputs.username }}} -gt 39 ]; then
          echo "::error::Username too long: ${#{{ inputs.username }}} characters. GitHub usernames are max 39 characters"
          exit 1
        fi

        echo "Input validation completed successfully"

    - name: Check for Ansible Files
      shell: bash
      run: |
        set -euo pipefail

        if ! find . -name "*.yml" | grep -q .; then
          echo "No Ansible files found. Skipping lint and fix."
          exit 0
        fi

    - name: Install ansible-lint
      shell: bash
      run: |
        set -euo pipefail

        pip install ansible-lint==6.22.1 || {
          echo "::error::Failed to install ansible-lint"
          exit 1
        }

    - name: Run ansible-lint
      shell: bash
      run: |
        set -euo pipefail

        ansible-lint --write --parseable-severity --format sarif > ansible-lint.sarif

    - name: Set Git Config for Fixes
      uses: ivuorinen/actions/set-git-config@main
      with:
        token: ${{ inputs.token }}
        username: ${{ inputs.username }}
        email: ${{ inputs.email }}

    - name: Commit Fixes
      shell: bash
      run: |
        set -euo pipefail

        if git diff --quiet; then
          echo "No changes to commit."
        else
          git add .
          git commit -m "fix: applied ansible lint fixes"
          git push
        fi

    - name: Upload SARIF Report
      uses: github/codeql-action/upload-sarif@64d10c13136e1c5bce3e5fbde8d4906eeaafc885 # v3.30.6
      with:
        sarif_file: ansible-lint.sarif
