---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Python Version Detect V2
description: 'Detects Python version from project configuration files using shared utilities.'
author: 'Ismo Vuorinen'

branding:
  icon: code
  color: blue

inputs:
  default-version:
    description: 'Default Python version to use if no version is detected.'
    required: false
    default: '3.12'

outputs:
  python-version:
    description: 'Detected or default Python version.'
    value: ${{ steps.detect-python-version.outputs.python-version }}

runs:
  using: composite
  steps:
    - name: Parse Universal Version Files
      id: universal-files
      uses: ./version-file-parser
      with:
        language: 'python'
        tool-versions-key: 'python'
        dockerfile-image: 'python'
        version-file: '.python-version'

    - name: Detect Python Version
      id: detect-python-version
      shell: bash
      run: |
        set -euo pipefail

        # Function to get version from pyproject.toml
        get_pyproject_version() {
          if [ -f pyproject.toml ]; then
            local version
            version=$(grep -E '^requires-python\s*=' pyproject.toml | sed -n 's/.*[">= ]*\([0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?\).*/\1/p' | head -1)
            if [ -n "$version" ]; then
              echo "$version"
              return 0
            fi
          fi
          return 1
        }

        # Function to get version from setup.py
        get_setup_py_version() {
          if [ -f setup.py ]; then
            local version
            version=$(grep -E 'python_requires\s*=' setup.py | sed -n 's/.*[">= ]*\([0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?\).*/\1/p' | head -1)
            if [ -n "$version" ]; then
              echo "$version"
              return 0
            fi
          fi
          return 1
        }

        # Function to get version from runtime.txt (Heroku style)
        get_runtime_txt_version() {
          if [ -f runtime.txt ]; then
            local version
            version=$(cat runtime.txt | sed -n 's/python-\([0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?\).*/\1/p')
            if [ -n "$version" ]; then
              echo "$version"
              return 0
            fi
          fi
          return 1
        }

        # Function to get version from Pipfile
        get_pipfile_version() {
          if [ -f Pipfile ]; then
            local version
            version=$(grep -E '^python_version\s*=' Pipfile | sed -n 's/.*[">= ]*\([0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?\).*/\1/p')
            if [ -n "$version" ]; then
              echo "$version"
              return 0
            fi
          fi
          return 1
        }

        # Function to get version from tox.ini
        get_tox_version() {
          if [ -f tox.ini ]; then
            local version
            version=$(grep -E '^basepython\s*=' tox.ini | sed -n 's/.*python\([0-9]\+\.[0-9]\+\(\.[0-9]\+\)\?\).*/\1/p' | head -1)
            if [ -n "$version" ]; then
              echo "$version"
              return 0
            fi
          fi
          return 1
        }

        # Detect version with priority order
        # 1. Use universal file parser results first
        detected_version=""

        # Check universal file parser outputs (in priority order)
        if [ -n "${{ steps.universal-files.outputs.version-file-version }}" ]; then
          detected_version="${{ steps.universal-files.outputs.version-file-version }}"
          echo "Using version from .python-version: $detected_version" >&2
        elif [ -n "${{ steps.universal-files.outputs.tool-versions-version }}" ]; then
          detected_version="${{ steps.universal-files.outputs.tool-versions-version }}"
          echo "Using version from .tool-versions: $detected_version" >&2
        elif [ -n "${{ steps.universal-files.outputs.devcontainer-version }}" ]; then
          detected_version="${{ steps.universal-files.outputs.devcontainer-version }}"
          echo "Using version from devcontainer: $detected_version" >&2
        elif [ -n "${{ steps.universal-files.outputs.dockerfile-version }}" ]; then
          detected_version="${{ steps.universal-files.outputs.dockerfile-version }}"
          echo "Using version from Dockerfile: $detected_version" >&2
        else
          # Check project-specific configuration files
          detected_version=$(get_pyproject_version ||
                            get_setup_py_version ||
                            get_runtime_txt_version ||
                            get_pipfile_version ||
                            get_tox_version ||
                            echo "${{ inputs.default-version }}")
        fi

        echo "Using Python version: $detected_version"
        echo "python-version=$detected_version" >> $GITHUB_OUTPUT
