---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: GitHub Release
description: 'Creates a GitHub release with a version and changelog.'
author: 'Ismo Vuorinen'

branding:
  icon: 'tag'
  color: 'blue'

inputs:
  version:
    description: 'The version for the release.'
    required: true
  changelog:
    description: 'The changelog or description for the release.'
    required: false
    default: ''

outputs:
  release_url:
    description: 'URL of the created GitHub release'
    value: ${{ steps.create-release.outputs.release_url || steps.create-release-custom.outputs.release_url }}
  release_id:
    description: 'ID of the created GitHub release'
    value: ${{ steps.create-release.outputs.release_id || steps.create-release-custom.outputs.release_id }}
  upload_url:
    description: 'Upload URL for the created GitHub release assets'
    value: ${{ steps.create-release.outputs.upload_url || steps.create-release-custom.outputs.upload_url }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      id: validate
      shell: bash
      run: |
        set -euo pipefail

        # Validate version format (semantic versioning)
        if ! [[ "${{ inputs.version }}" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
          echo "::error::Invalid version format: '${{ inputs.version }}'. Expected semantic version (e.g., '1.2.3', 'v1.2.3-alpha', '1.2.3+build')"
          exit 1
        fi

        # Validate changelog content (if provided)
        changelog="${{ inputs.changelog }}"
        if [[ -n "$changelog" ]] && [[ ${#changelog} -gt 10000 ]]; then
          echo "::warning::Changelog is very long (${#changelog} characters). Consider using shorter release notes."
        fi

        # Check if gh CLI is available
        if ! command -v gh >/dev/null 2>&1; then
          echo "::error::GitHub CLI (gh) is not available. Please ensure it's installed in the environment."
          exit 1
        fi

    - name: Create GitHub Release with Autogenerated Changelog
      id: create-release
      if: ${{ inputs.changelog == '' }}
      shell: bash
      run: |
        set -euo pipefail

        gh release create ${{ inputs.version }} \
          --repo="${GITHUB_REPOSITORY}" \
          --title="${{ inputs.version }}" \
          --generate-notes

        # Get release info and set outputs
        RELEASE_INFO=$(gh release view ${{ inputs.version }} --repo="${GITHUB_REPOSITORY}" --json url,id,uploadUrl)
        echo "release_url=$(echo "$RELEASE_INFO" | jq -r '.url')" >> $GITHUB_OUTPUT
        echo "release_id=$(echo "$RELEASE_INFO" | jq -r '.id')" >> $GITHUB_OUTPUT
        echo "upload_url=$(echo "$RELEASE_INFO" | jq -r '.uploadUrl')" >> $GITHUB_OUTPUT

    - name: Create GitHub Release with Custom Changelog
      id: create-release-custom
      if: ${{ inputs.changelog != '' }}
      shell: bash
      run: |-
        set -euo pipefail

        gh release create ${{ inputs.version }} \
          --repo="${GITHUB_REPOSITORY}" \
          --title="${{ inputs.version }}" \
          --notes="${{ inputs.changelog }}"

        # Get release info and set outputs
        RELEASE_INFO=$(gh release view ${{ inputs.version }} --repo="${GITHUB_REPOSITORY}" --json url,id,uploadUrl)
        echo "release_url=$(echo "$RELEASE_INFO" | jq -r '.url')" >> $GITHUB_OUTPUT
        echo "release_id=$(echo "$RELEASE_INFO" | jq -r '.id')" >> $GITHUB_OUTPUT
        echo "upload_url=$(echo "$RELEASE_INFO" | jq -r '.uploadUrl')" >> $GITHUB_OUTPUT
