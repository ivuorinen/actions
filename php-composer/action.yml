---
# yaml-language-server: $schema=https://json.schemastore.org/github-action.json
name: Run Composer Install
description: 'Runs Composer install on a repository with advanced caching and configuration.'
author: 'Ismo Vuorinen'

branding:
  icon: server
  color: gray-dark

inputs:
  php:
    description: 'PHP Version to use.'
    required: true
    default: '8.4'
  extensions:
    description: 'Comma-separated list of PHP extensions to install'
    required: false
    default: 'mbstring, xml, zip, curl, json'
  tools:
    description: 'Comma-separated list of Composer tools to install'
    required: false
    default: 'composer:v2'
  args:
    description: 'Arguments to pass to Composer.'
    required: false
    default: '--no-progress --prefer-dist --optimize-autoloader'
  composer-version:
    description: 'Composer version to use (1 or 2)'
    required: false
    default: '2'
  stability:
    description: 'Minimum stability (stable, RC, beta, alpha, dev)'
    required: false
    default: 'stable'
  cache-directories:
    description: 'Additional directories to cache (comma-separated)'
    required: false
    default: ''
  token:
    description: 'GitHub token for private repository access'
    required: false
    default: ${{ github.token }}
  max-retries:
    description: 'Maximum number of retry attempts for Composer commands'
    required: false
    default: '3'

outputs:
  lock:
    description: 'composer.lock or composer.json file hash'
    value: ${{ steps.hash.outputs.lock }}
  php-version:
    description: 'Installed PHP version'
    value: ${{ steps.php.outputs.version }}
  composer-version:
    description: 'Installed Composer version'
    value: ${{ steps.composer.outputs.version }}
  cache-hit:
    description: 'Indicates if there was a cache hit'
    value: ${{ steps.composer-cache.outputs.cache-hit }}

runs:
  using: composite
  steps:
    - name: Validate Inputs
      id: validate
      shell: bash
      run: |
        set -euo pipefail

        # Validate PHP version format
        if ! [[ "${{ inputs.php }}" =~ ^[0-9]+(\.[0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "::error::Invalid PHP version format: '${{ inputs.php }}'. Expected format: X.Y or X.Y.Z (e.g., 8.4, 8.4.1)"
          exit 1
        fi

        # Validate PHP version is supported (5.6 minimum, reasonable upper bound)
        php_major_minor=$(echo "${{ inputs.php }}" | cut -d. -f1,2)
        # Use sort -V for version comparison (no bc dependency)
        if [[ $(printf "%s\n5.6" "$php_major_minor" | sort -V | head -n1) != "5.6" ]]; then
          echo "::error::PHP version too old: '${{ inputs.php }}'. Minimum supported version is 5.6"
          exit 1
        fi
        if [[ $(printf "8.5\n%s" "$php_major_minor" | sort -V | head -n1) != "8.5" ]]; then
          echo "::warning::PHP version may be unsupported: '${{ inputs.php }}'. Latest stable version is around 8.4"
        fi

        # Validate extensions format (comma-separated list)
        if [[ -n "${{ inputs.extensions }}" ]]; then
          if ! [[ "${{ inputs.extensions }}" =~ ^[a-zA-Z0-9]+(,[[:space:]]*[a-zA-Z0-9]+)*$ ]]; then
            echo "::error::Invalid extensions format: '${{ inputs.extensions }}'. Expected comma-separated list (e.g., mbstring, xml, zip)"
            exit 1
          fi
        fi

        # Validate tools format (comma-separated list with optional versions)
        if [[ -n "${{ inputs.tools }}" ]]; then
          if ! [[ "${{ inputs.tools }}" =~ ^[a-zA-Z0-9:v.-]+(,[[:space:]]*[a-zA-Z0-9:v.-]+)*$ ]]; then
            echo "::error::Invalid tools format: '${{ inputs.tools }}'. Expected comma-separated list with optional versions (e.g., composer:v2, phpunit:^9.0)"
            exit 1
          fi
        fi

        # Validate Composer version
        case "${{ inputs.composer-version }}" in
          1|2)
            ;;
          *)
            echo "::error::Invalid composer-version: '${{ inputs.composer-version }}'. Allowed values: 1, 2"
            exit 1
            ;;
        esac

        # Validate stability option
        case "${{ inputs.stability }}" in
          stable|RC|beta|alpha|dev)
            ;;
          *)
            echo "::error::Invalid stability: '${{ inputs.stability }}'. Allowed values: stable, RC, beta, alpha, dev"
            exit 1
            ;;
        esac

        # Validate cache directories format if provided (comma-separated paths)
        if [[ -n "${{ inputs.cache-directories }}" ]]; then
          IFS=',' read -ra DIRS <<< "${{ inputs.cache-directories }}"
          for dir in "${DIRS[@]}"; do
            # Trim whitespace
            dir=$(echo "$dir" | xargs)

            # Check for path traversal
            if [[ "$dir" == *".."* ]] || [[ "$dir" == /* ]]; then
              echo "::error::Invalid cache directory path: '$dir'. Path traversal or absolute paths not allowed"
              exit 1
            fi

            # Check for valid directory name
            if ! [[ "$dir" =~ ^[a-zA-Z0-9._/-]+$ ]]; then
              echo "::error::Invalid cache directory name: '$dir'. Must contain only alphanumeric characters, periods, hyphens, underscores, and forward slashes"
              exit 1
            fi
          done
        fi

        # Validate GitHub token format (basic validation)
        if [[ -n "${{ inputs.token }}" ]] && [[ "${{ inputs.token }}" != "\${{ github.token }}" ]]; then
          if ! [[ "${{ inputs.token }}" =~ ^gh[efpousr]_[a-zA-Z0-9]{36}$ ]]; then
            echo "::warning::GitHub token format may be invalid. Expected format: gh*_36characters or gho_36characters"
          fi
        fi

        # Validate max retries (positive integer with reasonable upper limit)
        if ! [[ "${{ inputs.max-retries }}" =~ ^[0-9]+$ ]] || [ "${{ inputs.max-retries }}" -le 0 ] || [ "${{ inputs.max-retries }}" -gt 10 ]; then
          echo "::error::Invalid max-retries: '${{ inputs.max-retries }}'. Must be a positive integer between 1 and 10"
          exit 1
        fi

    - name: Setup PHP
      id: php
      uses: shivammathur/setup-php@20529878ed81ef8e78ddf08b480401e6101a850f # 2.35.3
      with:
        php-version: ${{ inputs.php }}
        extensions: ${{ inputs.extensions }}
        tools: ${{ inputs.tools }}
        coverage: none
        ini-values: memory_limit=1G, max_execution_time=600
        fail-fast: true

    - name: Get Dependency Hashes
      id: hash
      shell: bash
      run: |
        set -euo pipefail

        # Function to calculate directory hash
        calculate_dir_hash() {
          local dir=$1
          if [ -d "$dir" ]; then
            find "$dir" -type f -exec sha256sum {} \; | sort | sha256sum | cut -d' ' -f1
          fi
        }

        # Get composer.lock hash or composer.json hash
        if [ -f composer.lock ]; then
          echo "lock=${{ hashFiles('**/composer.lock') }}" >> $GITHUB_OUTPUT
        else
          echo "lock=${{ hashFiles('**/composer.json') }}" >> $GITHUB_OUTPUT
        fi

        # Calculate additional directory hashes
        if [ -n "${{ inputs.cache-directories }}" ]; then
          IFS=',' read -ra DIRS <<< "${{ inputs.cache-directories }}"
          for dir in "${DIRS[@]}"; do
            dir_hash=$(calculate_dir_hash "$dir")
            if [ -n "$dir_hash" ]; then
              echo "${dir}_hash=$dir_hash" >> $GITHUB_OUTPUT
            fi
          done
        fi

    - name: Configure Composer
      id: composer
      shell: bash
      run: |
        set -euo pipefail

        # Configure Composer environment
        composer config --global process-timeout 600
        composer config --global allow-plugins true
        composer config --global github-oauth.github.com "${{ inputs.token }}"

        if [ "${{ inputs.stability }}" != "stable" ]; then
          composer config minimum-stability ${{ inputs.stability }}
        fi

        # Verify Composer installation
        composer_full_version=$(composer --version | grep -oP 'Composer version \K[0-9]+\.[0-9]+\.[0-9]+')
        if [ -z "$composer_full_version" ]; then
          echo "::error::Failed to detect Composer version"
          exit 1
        fi

        # Extract major version for comparison
        composer_major_version=${composer_full_version%%.*}
        expected_version="${{ inputs.composer-version }}"

        echo "Detected Composer version: $composer_full_version (major: $composer_major_version)"

        if [ "$composer_major_version" != "$expected_version" ]; then
          echo "::error::Composer major version mismatch. Expected $expected_version.x, got $composer_full_version"
          exit 1
        fi

        # Store full version for output
        echo "version=$composer_full_version" >> "$GITHUB_OUTPUT"

        # Log Composer configuration
        echo "Composer Configuration:"
        composer config --list

    - name: Cache Composer packages
      id: composer-cache
      uses: ../common-cache
      with:
        type: 'composer'
        paths: 'vendor,~/.composer/cache${{ inputs.cache-directories != "" && format(",{0}", inputs.cache-directories) || "" }}'
        key-prefix: 'php-${{ inputs.php }}-composer-${{ inputs.composer-version }}'
        key-files: 'composer.lock,composer.json'
        restore-keys: |
          ${{ runner.os }}-php-${{ inputs.php }}-composer-${{ inputs.composer-version }}-
          ${{ runner.os }}-php-${{ inputs.php }}-composer-
          ${{ runner.os }}-php-${{ inputs.php }}-

    - name: Clear Composer Cache Before Final Attempt
      if: steps.composer-cache.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail
        echo "Clearing Composer cache to ensure clean installation..."
        composer clear-cache

    - name: Install Dependencies
      uses: ../common-retry
      with:
        command: 'composer install ${{ inputs.args }}'
        max-retries: ${{ inputs.max-retries }}
        retry-delay: '30'
        description: 'Installing PHP dependencies via Composer'

    - name: Verify Installation
      shell: bash
      run: |
        set -euo pipefail

        # Verify vendor directory
        if [ ! -d "vendor" ]; then
          echo "::error::vendor directory not found"
          exit 1
        fi

        # Verify autoloader
        if [ ! -f "vendor/autoload.php" ]; then
          echo "::error::autoload.php not found"
          exit 1
        fi

    - name: Generate Optimized Autoloader
      if: success()
      shell: bash
      run: |-
        set -euo pipefail
        composer dump-autoload --optimize --classmap-authoritative
