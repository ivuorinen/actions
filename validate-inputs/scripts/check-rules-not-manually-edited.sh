#!/usr/bin/env bash
# Pre-commit hook to prevent manual editing of autogenerated validation rules
# This script checks if any rules files have been manually modified

set -euo pipefail

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Check if we're in the project root
if [[ ! -d "$RULES_DIR" ]]; then
  echo -e "${RED}Error: Rules directory not found. Run from project root.${NC}" >&2
  exit 1
fi

# Function to check if a file looks manually edited
check_file_manually_edited() {
  local file="$1"

  # Check if file has the autogenerated header
  if ! head -n 5 "$file" | grep -q "DO NOT EDIT MANUALLY"; then
    echo -e "${RED}‚ö†Ô∏è  SUSPICIOUS: $file missing 'DO NOT EDIT MANUALLY' header${NC}"
    return 1
  fi

  # Check if file has generator version
  if ! grep -q "Generated by update-validators.py" "$file"; then
    echo -e "${RED}‚ö†Ô∏è  SUSPICIOUS: $file missing generator attribution${NC}"
    return 1
  fi

  return 0
}

# Function to check if rules are up-to-date
check_rules_up_to_date() {
  echo -e "${YELLOW}üîç Checking if validation rules are up-to-date...${NC}"

  # Run the update script in dry-run mode
  if cd "$PROJECT_ROOT" && python3 validate-inputs/scripts/update-validators.py --dry-run >/dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ Validation rules are up-to-date${NC}"
    return 0
  else
    echo -e "${RED}‚ùå Validation rules are out-of-date${NC}"
    echo -e "${YELLOW}üí° Run 'make update-validators' to regenerate rules${NC}"
    return 1
  fi
}

# Main check function
main() {
  local exit_code=0
  local files_checked=0

  echo -e "${YELLOW}üõ°Ô∏è  Checking autogenerated validation rules...${NC}"

  # Check all rules.yml files in action directories
  while IFS= read -r -d '' file; do
    if [[ -f "$file" ]]; then
      ((files_checked++))
      if ! check_file_manually_edited "$file"; then
        exit_code=1
      fi
    fi
  done < <(find "$PROJECT_ROOT" -path "./*/rules.yml" -type f -print0)

  if [[ $files_checked -eq 0 ]]; then
    echo -e "${YELLOW}‚ö†Ô∏è  No validation rule files found${NC}"
    return 0
  fi

  # Check if rules are up-to-date
  if ! check_rules_up_to_date; then
    exit_code=1
  fi

  if [[ $exit_code -eq 0 ]]; then
    echo -e "${GREEN}‚úÖ All $files_checked validation rules look properly autogenerated${NC}"
  else
    echo ""
    echo -e "${RED}‚ùå VALIDATION RULES CHECK FAILED${NC}"
    echo -e "${YELLOW}üìã To fix these issues:${NC}"
    echo -e "   1. Revert any manual changes to rules files"
    echo -e "   2. Run 'make update-validators' to regenerate rules"
    echo -e "   3. Modify generator logic in update-validators.py if needed"
    echo ""
    echo -e "${YELLOW}üìñ Rules are now stored as rules.yml in each action folder${NC}"
  fi

  return $exit_code
}

# Run the check
main "$@"
