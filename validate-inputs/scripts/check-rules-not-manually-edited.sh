#!/bin/sh
# Pre-commit hook to prevent manual editing of autogenerated validation rules
# This script checks if any rules files have been manually modified

set -eu

SCRIPT_DIR="$(cd "$(dirname "$0")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Color codes for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# Check if we're in the project root
if [ ! -d "$RULES_DIR" ]; then
  printf "${RED}Error: Rules directory not found. Run from project root.${NC}\n" >&2
  exit 1
fi

# Function to check if a file looks manually edited
check_file_manually_edited() {
  file="$1"

  # Check if file has the autogenerated header
  if ! head -n 5 "$file" | grep -q "DO NOT EDIT MANUALLY"; then
    printf "${RED}‚ö†Ô∏è  SUSPICIOUS: $file missing 'DO NOT EDIT MANUALLY' header${NC}\n"
    return 1
  fi

  # Check if file has generator version
  if ! grep -q "Generated by update-validators.py" "$file"; then
    printf "${RED}‚ö†Ô∏è  SUSPICIOUS: $file missing generator attribution${NC}\n"
    return 1
  fi

  return 0
}

# Function to check if rules are up-to-date
check_rules_up_to_date() {
  printf "${YELLOW}üîç Checking if validation rules are up-to-date...${NC}\n"

  # Run the update script in dry-run mode
  if cd "$PROJECT_ROOT" && python3 validate-inputs/scripts/update-validators.py --dry-run >/dev/null 2>&1; then
    printf "${GREEN}‚úÖ Validation rules are up-to-date${NC}\n"
    return 0
  else
    printf "${RED}‚ùå Validation rules are out-of-date${NC}\n"
    printf "${YELLOW}üí° Run 'make update-validators' to regenerate rules${NC}\n"
    return 1
  fi
}

# Main check function
main() {
  exit_code=0
  files_checked=0

  printf "${YELLOW}üõ°Ô∏è  Checking autogenerated validation rules...${NC}\n"

  # Check all rules.yml files in action directories
  find "$PROJECT_ROOT" -path "./*/rules.yml" -type f | while IFS= read -r file; do
    if [ -f "$file" ]; then
      files_checked=$((files_checked + 1))
      if ! check_file_manually_edited "$file"; then
        exit_code=1
      fi
    fi
  done

  if [ "$files_checked" -eq 0 ]; then
    printf "${YELLOW}‚ö†Ô∏è  No validation rule files found${NC}\n"
    return 0
  fi

  # Check if rules are up-to-date
  if ! check_rules_up_to_date; then
    exit_code=1
  fi

  if [ "$exit_code" -eq 0 ]; then
    printf "${GREEN}‚úÖ All $files_checked validation rules look properly autogenerated${NC}\n"
  else
    printf "\n"
    printf "${RED}‚ùå VALIDATION RULES CHECK FAILED${NC}\n"
    printf "${YELLOW}üìã To fix these issues:${NC}\n"
    printf "   1. Revert any manual changes to rules files\n"
    printf "   2. Run 'make update-validators' to regenerate rules\n"
    printf "   3. Modify generator logic in update-validators.py if needed\n"
    printf "\n"
    printf "${YELLOW}üìñ Rules are now stored as rules.yml in each action folder${NC}\n"
  fi

  return $exit_code
}

# Run the check
main "$@"
