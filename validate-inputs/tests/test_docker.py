"""Tests for docker validator.

Generated by generate-tests.py - Do not edit manually.
"""

from validators.docker import DockerValidator


class TestDockerValidator:
    """Test cases for DockerValidator."""

    def setup_method(self):
        """Set up test fixtures."""
        self.validator = DockerValidator("test-action")

    def teardown_method(self):
        """Clean up after tests."""
        self.validator.clear_errors()

    def test_valid_image_names(self):
        """Test valid Docker image names."""
        assert self.validator.validate_image_name("myapp") is True
        assert self.validator.validate_image_name("my-app_v2") is True
        assert self.validator.validate_image_name("company.com/myapp") is False  # No slashes

    def test_valid_tags(self):
        """Test valid Docker tags."""
        assert self.validator.validate_tag("latest") is True
        assert self.validator.validate_tag("v1.2.3") is True
        assert self.validator.validate_tag("feature-branch-123") is True

    def test_valid_platforms(self):
        """Test valid Docker platforms."""
        assert self.validator.validate_architectures("linux/amd64") is True
        assert self.validator.validate_architectures("linux/arm64,linux/arm/v7") is True

    def test_invalid_platforms(self):
        """Test invalid Docker platforms."""
        assert self.validator.validate_architectures("windows/amd64") is False
        assert self.validator.validate_architectures("invalid/platform") is False

    def test_github_expressions(self):
        """Test GitHub expression handling."""
        assert self.validator.validate_image_name("${{ env.IMAGE_NAME }}") is True
        assert self.validator.validate_tag("${{ steps.meta.outputs.tags }}") is True
