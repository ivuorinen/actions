"""Tests for file validator.

Generated by generate-tests.py - Do not edit manually.
"""

from validators.file import FileValidator


class TestFileValidator:
    """Test cases for FileValidator."""

    def setup_method(self):
        """Set up test fixtures."""
        self.validator = FileValidator("test-action")

    def teardown_method(self):
        """Clean up after tests."""
        self.validator.clear_errors()

    def test_valid_file_paths(self):
        """Test valid file paths."""
        assert self.validator.validate_file_path("./src/main.py") is True
        assert (
            self.validator.validate_file_path("/absolute/path/file.txt") is False
        )  # Absolute paths rejected for security
        assert self.validator.validate_file_path("relative/path.yml") is True

    def test_path_traversal_detection(self):
        """Test path traversal detection."""
        assert self.validator.validate_file_path("../../../etc/passwd") is False
        assert self.validator.validate_file_path("./valid/../../../etc/passwd") is False
        assert self.validator.has_errors()

    def test_file_extensions(self):
        """Test file extension validation."""
        assert self.validator.validate_yaml_file("config.yml") is True
        assert self.validator.validate_yaml_file("config.yaml") is True
        assert self.validator.validate_yaml_file("config.txt") is False

    def test_github_expressions(self):
        """Test GitHub expression handling."""
        assert self.validator.validate_file_path("${{ github.workspace }}/file.txt") is True
        assert self.validator.validate_yaml_file("${{ inputs.config_file }}") is True
